//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Personaje/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Personaje
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerLocoMotionMapa"",
            ""id"": ""eae5bc66-d507-460c-a979-ba089fba3db6"",
            ""actions"": [
                {
                    ""name"": ""Movimiento"",
                    ""type"": ""Value"",
                    ""id"": ""fef53727-b347-4ad2-9ffc-2e51be8f3f09"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mirar"",
                    ""type"": ""Value"",
                    ""id"": ""02a3df76-10c8-43c1-a1ac-b2c75505f161"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dfa2d881-e6d1-44de-be21-e803f2031dcf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""564e6be3-875a-4077-a13f-5cd124852b21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1403a281-1685-404e-8276-5b9963277a13"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8bb36d0f-e8cb-4173-9fe9-adfdac5c2bd0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d6c37b7d-ff5d-4f98-b121-a2f9daf80f14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""OtrosControles"",
                    ""id"": ""789d85f1-24e3-4f61-8847-06db749dc50d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5a77278-6bfd-4c2f-a6ba-609c5001f39c"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0fb6dc73-d042-4c16-94ea-18e9fc38d9d5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cb0ee386-e2de-4068-b10b-9d966affef40"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c6ca364a-5a5d-4ba9-9186-3bac32302d4c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimiento"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e09d781-db9b-40a1-851f-854379ff38cd"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mirar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerLocoMotionMapa
            m_PlayerLocoMotionMapa = asset.FindActionMap("PlayerLocoMotionMapa", throwIfNotFound: true);
            m_PlayerLocoMotionMapa_Movimiento = m_PlayerLocoMotionMapa.FindAction("Movimiento", throwIfNotFound: true);
            m_PlayerLocoMotionMapa_Mirar = m_PlayerLocoMotionMapa.FindAction("Mirar", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_PlayerLocoMotionMapa.enabled, "This will cause a leak and performance issues, PlayerControls.PlayerLocoMotionMapa.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerLocoMotionMapa
        private readonly InputActionMap m_PlayerLocoMotionMapa;
        private List<IPlayerLocoMotionMapaActions> m_PlayerLocoMotionMapaActionsCallbackInterfaces = new List<IPlayerLocoMotionMapaActions>();
        private readonly InputAction m_PlayerLocoMotionMapa_Movimiento;
        private readonly InputAction m_PlayerLocoMotionMapa_Mirar;
        public struct PlayerLocoMotionMapaActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerLocoMotionMapaActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movimiento => m_Wrapper.m_PlayerLocoMotionMapa_Movimiento;
            public InputAction @Mirar => m_Wrapper.m_PlayerLocoMotionMapa_Mirar;
            public InputActionMap Get() { return m_Wrapper.m_PlayerLocoMotionMapa; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerLocoMotionMapaActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerLocoMotionMapaActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerLocoMotionMapaActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerLocoMotionMapaActionsCallbackInterfaces.Add(instance);
                @Movimiento.started += instance.OnMovimiento;
                @Movimiento.performed += instance.OnMovimiento;
                @Movimiento.canceled += instance.OnMovimiento;
                @Mirar.started += instance.OnMirar;
                @Mirar.performed += instance.OnMirar;
                @Mirar.canceled += instance.OnMirar;
            }

            private void UnregisterCallbacks(IPlayerLocoMotionMapaActions instance)
            {
                @Movimiento.started -= instance.OnMovimiento;
                @Movimiento.performed -= instance.OnMovimiento;
                @Movimiento.canceled -= instance.OnMovimiento;
                @Mirar.started -= instance.OnMirar;
                @Mirar.performed -= instance.OnMirar;
                @Mirar.canceled -= instance.OnMirar;
            }

            public void RemoveCallbacks(IPlayerLocoMotionMapaActions instance)
            {
                if (m_Wrapper.m_PlayerLocoMotionMapaActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerLocoMotionMapaActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerLocoMotionMapaActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerLocoMotionMapaActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerLocoMotionMapaActions @PlayerLocoMotionMapa => new PlayerLocoMotionMapaActions(this);
        public interface IPlayerLocoMotionMapaActions
        {
            void OnMovimiento(InputAction.CallbackContext context);
            void OnMirar(InputAction.CallbackContext context);
        }
    }
}
